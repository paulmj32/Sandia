state = "Texas"
county = c("Harris County")
census_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
census_map = census_map %>%
mutate(POPULATION = estimate) %>%
dplyr::select(GEOID, NAME, POPULATION) %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
census_map_area = census_map %>%
mutate(AREA = as.vector(st_area(census_map))) %>% #sq-meters; as.vector removes units suffix
mutate(DENSITY = POPULATION / AREA * 1000^2) #population per sq-km
load(file = "./Data/census_map_nlcd.Rda")  #NLCD
census_map_nlcd = census_map_nlcd %>% st_set_geometry(NULL)
load(file = "./Data/census_map_dem.Rda") #DEM
census_map_dem = census_map_dem %>% st_set_geometry(NULL)
load(file = "./Data/census_map_rz.Rda") #Root Zone
census_map_rz = census_map_rz %>% st_set_geometry(NULL)
load(file = "./Data/census_map_social.Rda") #Socio-economic
census_map_social = census_map_social %>% st_set_geometry(NULL)
load(file = "./Data/census_map_spi.Rda") #SPI
census_map_spi = census_map_spi %>% st_set_geometry(NULL)
load(file = "./Data/census_map_soil_day.Rda") #Soil Moisture
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_soil_day, c(GEOID, soil10_3dLAG:soil100_3dLAG)), by = "GEOID")
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_soil_day, c(GEOID, soil10_3dLAG:soil100_3dLAG)), by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean)
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_soil_day, c(GEOID, soil10_3dLAG:soil100_3dLAG)), by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean, Density = DENSITY)
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")  #load trained model
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_soil_day, c(GEOID, soil10_3dLAG:soil100_3dLAG)), by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean,
soil10_lag = soil10_3dLAG, soil40_lag = soil40_3dLAG, soil100_lag = soil100_3dLAG,
Density = DENSITY)
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")  #load trained model
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Outages - No Weather Data - Harris County, TX")
predict(bart, X)
options(java.parameters = "-Xmx7g")
library(bartMachine)
set_bart_machine_num_cores(4)
library(lme4)
library(corrplot)
library(viridis)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
library(raster) #make sure ncdf4 package is installed
library(lubridate)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
##############################################################################################
## WHICH VARIABLES TO USE? ###################################################################
##############################################################################################
#### LOAD COUNTY VARIABLES
load("./Data/SandiaVariables.Rda") #from Sandia2_vars.R
#### POWER DATA
#outages_csv = read.csv("./Data/SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "./Data/outages.Rda")
load(file = "Data/outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
# Add day and month to data
county_map_outages = outages_csv %>%
mutate(rowID = row_number()) %>% # add row number to index events
mutate(date_day = str_extract(date_hour, "^.{10}")) %>% #returns first 10 characters of date_time (yyyy-mm-dd)
mutate(date_month = str_extract(date_hour, "^.{7}")) # returns yyyy-mm
#### PROCESS POWER DATA
# Filter dates that are flagged as outages
county_map_outages_FILTER = county_map_outages %>%
filter(outage_status %in% c("pre", "start", "during", "end")) #filter events flagged as outages
# # Join power outages by GEOID and time-stamp
# county_map_outages_JOIN = county_map_area %>%
#   inner_join(county_map_outages_FILTER, by = c("GEOID" = "fips_code")) %>% # join outage/hourly weather data
#   left_join(county_map_static_CLEAN, by = c("GEOID")) %>% #join static environmental variables
#   left_join(county_scores_CLEAN, by = c("GEOID")) %>% #join socio-economic variables
#   left_join(county_map_soil_CLEAN, by = c("GEOID", "date_hour")) %>% #join soil moisture by county and hour time-stamp
#   left_join(county_map_spi_CLEAN, by = c("GEOID", "date_month")) #join SPI by GEOID and month
# Daily soil - 3 day lag for forecasting
county_map_soil_CLEAN$date_day = substr(county_map_soil_CLEAN$date_hour, 1,10)
daily_soil = county_map_soil_CLEAN %>%
group_by(GEOID, date_day) %>%
summarise(soil10_DAY = mean(soil0_10),
soil100_DAY = mean(soil40_100))
daily_soil$ts_day = lubridate::ymd(daily_soil$date_day)
daily_soil$ts_3daylag = daily_soil$ts_day + 3 #take 3-day lag (what's available for forecasting)
daily_soil_CLEAN = daily_soil %>%
mutate(date_3daylag = as.character(ts_3daylag)) %>% # back to character format to join later on
dplyr::select(-date_day, -ts_day, -ts_3daylag) %>%
rename(soil10_3dLAG = soil10_DAY, soil100_3dLAG = soil100_DAY)
# Monthly SPI - 1 month lag for forecasting
monthly_spi = county_map_spi_CLEAN
monthly_spi$ts_month = lubridate::ym(monthly_spi$date_month)
monthly_spi$ts_1mthlag = monthly_spi$ts_month %m+% months(1)
monthly_spi_CLEAN = monthly_spi %>%
mutate(date_1mthlag = substr(as.character(ts_1mthlag), 1, 7)) %>%
dplyr::select(-date_month, -ts_month, -ts_1mthlag) %>%
rename(spi03_1mLAG = spi_03, spi12_1mLAG = spi_12, spi24_1mLAG = spi_24)
county_map_outages_CIVIC = county_map_area %>%
inner_join(county_map_outages_FILTER, by = c("GEOID" = "fips_code")) %>% # join outage/hourly weather data
left_join(county_map_static_CLEAN, by = c("GEOID")) %>% #join static environmental variables
left_join(county_scores_CLEAN, by = c("GEOID")) %>% #join socio-economic variables
inner_join(daily_soil_CLEAN, by = c("GEOID", "date_day" = "date_3daylag")) %>% #join soil moisture by county and 3day lag
inner_join(monthly_spi_CLEAN, by = c("GEOID", "date_month" = "date_1mthlag")) #join SPI by GEOID and month
# Group by event and aggregate dynamic variables
outages_group = county_map_outages_CIVIC %>%
st_set_geometry(NULL) %>%
group_by(outage_number, GEOID) %>%
summarise(out_hrs= n(), out_maxcust = max(hr_mean_customers_out), out_percust = sum(hr_mean_customers_out) / sum(POPULATION),
Density = mean(DENSITY),
PS_mean = mean(PS), PS_sd = sd(PS), #mean and sd of surface pressure
SLP_mean = mean(SLP), PS_sd = sd(SLP), # same for sea level pressure
QV_max = max(QV10M), # max specific humidity
U_max = max(U10M),
V_max = max(V10M),
WIND_max = max(WIND10M),
T_mean = mean(T10M), T_sd = sd(T10M),
TQI_mean = mean(TQI), TQL_mean = mean(TQL), TQV_mean = mean(TQV),
soil10_lag = first(soil10_3dLAG), soil100_lag = first(soil100_3dLAG),
spi03_lag = first(spi03_1mLAG), spi12_lag = first(spi12_1mLAG), spi24_lag = first(spi24_1mLAG)
)
# Join back in the static environmental and socio-economic variables
county_outages_GROUP = outages_group %>%
left_join(county_map_static_CLEAN, by = c("GEOID")) %>% #join static environmental variables
left_join(county_scores_CLEAN, by = c("GEOID")) #join socio-economic variables
# Select only data we'll have available for prediction at the census tract level
county_outages_GROUP_CLEAN = county_outages_GROUP %>%
dplyr::select(-c(PS_mean:TQV_mean, AMBULANCES:DEATHS, EMPBLDG:HOSPBEDS, INTERNET:NURSHOMES, PHYSICIANS, PROFORGS:PROXCAP, RADIO:WATEFF, QEXTRCT, QNRRES)) %>%
dplyr::select(-c(RZ_mode, QGROUPHSE, QSERVIND)) #take out variables where effect has high uncertaintly, likely from lingering multicollinearity
##############################################################################################################
#### MODELING ################################################################################################
##############################################################################################################
# Filter to large events (90th percentile in duration, > 12 hrs)
df_bart = data.frame(county_outages_GROUP_CLEAN) %>%
drop_na %>%
dplyr::filter(out_hrs > 12) #filter to big events
# y = log(df_bart$out_hrs) #take log to help deal with extreme values
y = log(df_bart$out_maxcust)
#feature selection2 - before we get drop off in importance
X = df_bart %>%
dplyr::select(-outage_number, -GEOID, -out_hrs, -out_maxcust, -out_percust) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Max Outages - No Weather Data")
bart = bartMachine(X, y, serialize = T)
save(bart, file = "bart_civic.Rda")
#### LOAD PACKAGES and SET DIRECTORY
options(java.parameters = "-Xmx7g")
library(bartMachine)
set_bart_machine_num_cores(4)
library(lme4)
library(corrplot)
library(viridis)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
library(raster) #make sure ncdf4 package is installed
library(lubridate)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
##############################################################################################
### LOAD VARIABLES ###########################################################################
##############################################################################################
# Get census tract map
mycrs = 5070 #chose projected coordinate system: EPSG 5070 NAD83 Conus Albers
year=2019 # year for county boundaries
options(tigris_use_cache = TRUE) #cache shapefiles for future sessions
soptions(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
census_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
census_map = census_map %>%
mutate(POPULATION = estimate) %>%
dplyr::select(GEOID, NAME, POPULATION) %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
census_map_area = census_map %>%
mutate(AREA = as.vector(st_area(census_map))) %>% #sq-meters; as.vector removes units suffix
mutate(DENSITY = POPULATION / AREA * 1000^2) #population per sq-km
load(file = "./Data/census_map_nlcd.Rda")  #NLCD
census_map_nlcd = census_map_nlcd %>% st_set_geometry(NULL)
load(file = "./Data/census_map_dem.Rda") #DEM
census_map_dem = census_map_dem %>% st_set_geometry(NULL)
load(file = "./Data/census_map_rz.Rda") #Root Zone
census_map_rz = census_map_rz %>% st_set_geometry(NULL)
load(file = "./Data/census_map_social.Rda") #Socio-economic
census_map_social = census_map_social %>% st_set_geometry(NULL)
load(file = "./Data/census_map_spi.Rda") #SPI
census_map_spi = census_map_spi %>% st_set_geometry(NULL)
load(file = "./Data/census_map_soil_day.Rda") #Soil Moisture
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_soil_day, c(GEOID, soil10_3dLAG:soil100_3dLAG)), by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean,
soil10_lag = soil10_3dLAG, soil40_lag = soil40_3dLAG, soil100_lag = soil100_3dLAG,
Density = DENSITY)
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")  #load trained model
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Outages - No Weather Data - Harris County, TX")
predict(bart, X)
?bart
?bartMachine
options(java.parameters = "-Xmx7g")
library(bartMachine)
set_bart_machine_num_cores(4)
library(lme4)
library(corrplot)
library(viridis)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
library(raster) #make sure ncdf4 package is installed
library(lubridate)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
##############################################################################################
## WHICH VARIABLES TO USE? ###################################################################
##############################################################################################
#### LOAD COUNTY VARIABLES
load("./Data/SandiaVariables.Rda") #from Sandia2_vars.R
#### POWER DATA
#outages_csv = read.csv("./Data/SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "./Data/outages.Rda")
load(file = "Data/outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
# Add day and month to data
county_map_outages = outages_csv %>%
mutate(rowID = row_number()) %>% # add row number to index events
mutate(date_day = str_extract(date_hour, "^.{10}")) %>% #returns first 10 characters of date_time (yyyy-mm-dd)
mutate(date_month = str_extract(date_hour, "^.{7}")) # returns yyyy-mm
#### PROCESS POWER DATA
# Filter dates that are flagged as outages
county_map_outages_FILTER = county_map_outages %>%
filter(outage_status %in% c("pre", "start", "during", "end")) #filter events flagged as outages
# # Join power outages by GEOID and time-stamp
# county_map_outages_JOIN = county_map_area %>%
#   inner_join(county_map_outages_FILTER, by = c("GEOID" = "fips_code")) %>% # join outage/hourly weather data
#   left_join(county_map_static_CLEAN, by = c("GEOID")) %>% #join static environmental variables
#   left_join(county_scores_CLEAN, by = c("GEOID")) %>% #join socio-economic variables
#   left_join(county_map_soil_CLEAN, by = c("GEOID", "date_hour")) %>% #join soil moisture by county and hour time-stamp
#   left_join(county_map_spi_CLEAN, by = c("GEOID", "date_month")) #join SPI by GEOID and month
# Daily soil - 3 day lag for forecasting
county_map_soil_CLEAN$date_day = substr(county_map_soil_CLEAN$date_hour, 1,10)
daily_soil = county_map_soil_CLEAN %>%
group_by(GEOID, date_day) %>%
summarise(soil10_DAY = mean(soil0_10),
soil100_DAY = mean(soil40_100))
daily_soil$ts_day = lubridate::ymd(daily_soil$date_day)
daily_soil$ts_3daylag = daily_soil$ts_day + 3 #take 3-day lag (what's available for forecasting)
daily_soil_CLEAN = daily_soil %>%
mutate(date_3daylag = as.character(ts_3daylag)) %>% # back to character format to join later on
dplyr::select(-date_day, -ts_day, -ts_3daylag) %>%
rename(soil10_3dLAG = soil10_DAY, soil100_3dLAG = soil100_DAY)
# Monthly SPI - 1 month lag for forecasting
monthly_spi = county_map_spi_CLEAN
monthly_spi$ts_month = lubridate::ym(monthly_spi$date_month)
monthly_spi$ts_1mthlag = monthly_spi$ts_month %m+% months(1)
monthly_spi_CLEAN = monthly_spi %>%
mutate(date_1mthlag = substr(as.character(ts_1mthlag), 1, 7)) %>%
dplyr::select(-date_month, -ts_month, -ts_1mthlag) %>%
rename(spi03_1mLAG = spi_03, spi12_1mLAG = spi_12, spi24_1mLAG = spi_24)
county_map_outages_CIVIC = county_map_area %>%
inner_join(county_map_outages_FILTER, by = c("GEOID" = "fips_code")) %>% # join outage/hourly weather data
left_join(county_map_static_CLEAN, by = c("GEOID")) %>% #join static environmental variables
left_join(county_scores_CLEAN, by = c("GEOID")) %>% #join socio-economic variables
inner_join(daily_soil_CLEAN, by = c("GEOID", "date_day" = "date_3daylag")) %>% #join soil moisture by county and 3day lag
inner_join(monthly_spi_CLEAN, by = c("GEOID", "date_month" = "date_1mthlag")) #join SPI by GEOID and month
# Group by event and aggregate dynamic variables
outages_group = county_map_outages_CIVIC %>%
st_set_geometry(NULL) %>%
group_by(outage_number, GEOID) %>%
summarise(out_hrs= n(), out_maxcust = max(hr_mean_customers_out), out_percust = sum(hr_mean_customers_out) / sum(POPULATION),
Density = mean(DENSITY),
PS_mean = mean(PS), PS_sd = sd(PS), #mean and sd of surface pressure
SLP_mean = mean(SLP), PS_sd = sd(SLP), # same for sea level pressure
QV_max = max(QV10M), # max specific humidity
U_max = max(U10M),
V_max = max(V10M),
WIND_max = max(WIND10M),
T_mean = mean(T10M), T_sd = sd(T10M),
TQI_mean = mean(TQI), TQL_mean = mean(TQL), TQV_mean = mean(TQV),
soil10_lag = first(soil10_3dLAG), soil100_lag = first(soil100_3dLAG),
spi03_lag = first(spi03_1mLAG), spi12_lag = first(spi12_1mLAG), spi24_lag = first(spi24_1mLAG)
)
# Join back in the static environmental and socio-economic variables
county_outages_GROUP = outages_group %>%
left_join(county_map_static_CLEAN, by = c("GEOID")) %>% #join static environmental variables
left_join(county_scores_CLEAN, by = c("GEOID")) #join socio-economic variables
# Select only data we'll have available for prediction at the census tract level
county_outages_GROUP_CLEAN = county_outages_GROUP %>%
dplyr::select(-c(PS_mean:TQV_mean, AMBULANCES:DEATHS, EMPBLDG:HOSPBEDS, INTERNET:NURSHOMES, PHYSICIANS, PROFORGS:PROXCAP, RADIO:WATEFF, QEXTRCT, QNRRES)) %>%
dplyr::select(-c(RZ_mode, QGROUPHSE, QSERVIND)) #take out variables where effect has high uncertaintly, likely from lingering multicollinearity
# Filter to large events (90th percentile in duration, > 12 hrs)
df_bart = data.frame(county_outages_GROUP_CLEAN) %>%
drop_na %>%
dplyr::filter(out_hrs > 12) #filter to big events
# y = log(df_bart$out_hrs) #take log to help deal with extreme values
y = log(df_bart$out_maxcust)
#feature selection2 - before we get drop off in importance
X = df_bart %>%
dplyr::select(-outage_number, -GEOID, -out_hrs, -out_maxcust, -out_percust) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Max Outages - No Weather Data")
bart = bartMachine(X, y, serialize = T, impute_missingness_with_rf_impute = T)
save(bart, file = "bart_civic.Rda")
mycrs = 5070 #chose projected coordinate system: EPSG 5070 NAD83 Conus Albers
year=2019 # year for county boundaries
options(tigris_use_cache = TRUE) #cache shapefiles for future sessions
soptions(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
census_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
census_map = census_map %>%
mutate(POPULATION = estimate) %>%
dplyr::select(GEOID, NAME, POPULATION) %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
census_map_area = census_map %>%
mutate(AREA = as.vector(st_area(census_map))) %>% #sq-meters; as.vector removes units suffix
mutate(DENSITY = POPULATION / AREA * 1000^2) #population per sq-km
load(file = "./Data/census_map_nlcd.Rda")  #NLCD
census_map_nlcd = census_map_nlcd %>% st_set_geometry(NULL)
load(file = "./Data/census_map_dem.Rda") #DEM
census_map_dem = census_map_dem %>% st_set_geometry(NULL)
load(file = "./Data/census_map_rz.Rda") #Root Zone
census_map_rz = census_map_rz %>% st_set_geometry(NULL)
load(file = "./Data/census_map_social.Rda") #Socio-economic
census_map_social = census_map_social %>% st_set_geometry(NULL)
load(file = "./Data/census_map_spi.Rda") #SPI
census_map_spi = census_map_spi %>% st_set_geometry(NULL)
load(file = "./Data/census_map_soil_day.Rda") #Soil Moisture
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_soil_day, c(GEOID, soil10_3dLAG:soil100_3dLAG)), by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean,
soil10_lag = soil10_3dLAG, soil40_lag = soil40_3dLAG, soil100_lag = soil100_3dLAG,
Density = DENSITY)
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")  #load trained model
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Outages - No Weather Data - Harris County, TX")
predict(bart, X)
?build_bart_machine
which(is.na(X))
which(is.na(X), arr.ind = T)
View(X)
#feature selection2 - before we get drop off in importance
X = df_bart %>%
dplyr::select(-outage_number, -GEOID, -out_hrs, -out_maxcust, -out_percust) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Max Outages - No Weather Data")
bart = bartMachine(X, y, serialize = T, replace_missing_data_with_x_j_bar = T)
save(bart, file = "bart_civic.Rda")
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")  #load trained model
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Outages - No Weather Data - Harris County, TX")
predict(bart, X)
bart = bartMachine(X, y, serialize = T)
save(bart, file = "bart_civic.Rda")
#feature selection2 - before we get drop off in importance
X = df_bart %>%
dplyr::select(-outage_number, -GEOID, -out_hrs, -out_maxcust, -out_percust) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Max Outages - No Weather Data")
bart = bartMachine(X, y, serialize = T)
save(bart, file = "bart_civic.Rda")
index = st_touches(census_map_CLEAN, census_map_CLEAN)
#impute missing values based on neighboring polygons
which(is.na(census_map_CLEAN), arr.ind = T)
View(census_map_CLEAN)
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_soil_day, c(GEOID, soil10_3dLAG:soil100_3dLAG)), by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean,
soil10_lag = soil10_3dLAG, soil40_lag = soil40_3dLAG, soil100_lag = soil100_3dLAG,
Density = DENSITY)
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")  #load trained model
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c("spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Outages - No Weather Data - Harris County, TX")
predict(bart, X)
##############################################################################################
### BART MODEL ###############################################################################
##############################################################################################
load(file = "bart_civic.Rda")  #load trained model
X = census_map_CLEAN %>%
st_set_geometry(NULL) %>%
dplyr::select(c(GEOID, "spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean"))
model_name = paste("Predicting Outages - No Weather Data - Harris County, TX")
X = X %>%
drop_na()
X_2 = census_map_CLEAN %>%
#st_set_geometry(NULL) %>%
dplyr::select(c(GEOID, "spi24_lag","Density", "Developed", "QMOHO", "soil100_lag" , "QFEMALE", "QNATIVE", "spi12_lag", "Wetlands", "RZ_mean")) %>%
drop_na()
View(X)
X = X_2 %>%
dplyr::select(-GEOID) %>%
st_set_geometry(NULL)
model_name = paste("Predicting Outages - No Weather Data - Harris County, TX")
predict(bart, X)
predictions = predict(bart, X)
predictions = data.frame(predict(bart, X))
predictions = predict(bart, X)
predictions = predict(bart, X)
X_2$predictions = predictions
gg2 = ggplot(X_2)+
geom_sf(aes(fill = predictions), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal()  #removes background
theme_dark() +
#labs(title = "NLCD Land Use", fill = "Developed\n(prop.)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
gg2
