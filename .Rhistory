getwd()
outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
save(outages_csv, file = "outages.Rda")
head(outages_csv)
?head
head(outages_csv, n = 20)
year=2020
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
county_map = get_acs(geography = "county",
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
library(tidyverse)
library(sf)
library(tidycensus)
county_map = get_acs(geography = "county",
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
year=2018
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
county_map = get_acs(geography = "county",
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county_map = county_map %>% select(GEOID, NAME)
county_map
ggplot(county_map)
plot(county_map)
View(county_map)
library(tidyverse)
library(sf)
library(tidycensus)
## Read in Outage data
# outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
# save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
head(outages_csv)
## Format 5 character FIPS code to include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
## Exploratory analysis
#boxplot of hr_mean_frac_out to see where outliers may be
boxplot(outages_csv$hr_mean_frac_out)
## Exploratory analysis
#boxplot of hr_mean_frac_out to see where outliers may be
summary(outages_csv$hr_mean_frac_out)
#filter only outage events
outages_only = outages_csv %>%
filter(hr_mean_frac_out >= 0.01) #could potentially use status instead?
summary(outages_only$hr_mean_frac_out)
boxplot(outages_only$hr_mean_frac_out)
plot(outages_only$hr_mean_frac_out)
#order data with respect to mean frac_out
outages_only1 = outages_only %>% arrange(hr_mean_frac_out)
plot(outages_only1$hr_mean_frac_out)
outages_bad = outages_csv %>%
filter(hr_mean_frac_out > 0.5)
View(outages_bad)
outages_bad = outages_csv %>%
filter(hr_mean_frac_out > 1)
View(outages_bad)
outages_bad = outages_csv %>%
filter(hr_mean_frac_out > .75)
outages_bad = outages_csv %>%
filter(hr_mean_frac_out > .9)
outages_bad = outages_csv %>%
filter(hr_mean_frac_out > .8)
View(outages_bad)
## Get US county sf file
year=2018
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
county_map = get_acs(geography = "county",
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county_map = county_map %>% select(GEOID, NAME)
View(county_map)
## Get US county sf file
year=2018
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
county_map = get_acs(geography = "county",
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
View(county_map)
county_map = county_map %>% select(GEOID, NAME, estimate)
county_map = get_acs(geography = "county",
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
View(county_map)
library(tidyverse)
library(sf)
library(tidycensus)
library(lme4)
options(java.parameters = "-Xmx5g")
library(bartMachine)
set_bart_machine_num_cores(4)
head(outages_csv)
## Read in Outage data
# outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
# save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
library(tidyverse)
library(sf)
library(tidycensus)
library(lme4)
options(java.parameters = "-Xmx5g")
library(bartMachine)
set_bart_machine_num_cores(4)
## Read in Outage data
# outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
# save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
head(outages_csv)
## Format 5 character FIPS code to include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
## Try some statistical models
# BART
df_bart = outages_csv %>%
filter(hr_mean_frac_out >= 0.01) %>% #filter out non-outages
dplyr::select(-c(state_fips, state, county, fips_code, year, date_hour, county_population, hr_mean_customers_out, outage_status, outage_number))
## Try some statistical models
# BART
df_bart = outages_csv %>%
filter(hr_mean_frac_out >= 0.3) %>% #filter out non-outages
dplyr::select(-c(state_fips, state, county, fips_code, year, date_hour, county_population, hr_mean_customers_out, outage_status, outage_number))
y = df_bart$hr_mean_frac_out
X = df_bart; X$hr_mean_frac_out = NULL
set.seed(32) #for some reason BART doesn't like set.seed() / the command doesn't afffect stochastic elements (just repeat)
bart_cv = bartMachineCV(X, y) #bartMachine CV win: k: 2 nu, q: 3, 0.9 m: 50
save.image("~/Documents/01_VECTOR/Sandia/Sandia_bart.RData")
summary(bart_cv)
bart_cv
#predictions
predictions = predict(bart_cv, X)
rmse = sqrt(mean((predictions - df_bart$hr_mean_frac_out)^2))
rsq = 1 - sum((df_bart$hr_mean_frac_out - predictions)^2) / sum((df_bart$hr_mean_frac_out - mean(df_bart$hr_mean_frac_out))^2)
print(bart_cv)
#check BART assumptions
check_bart_error_assumptions(bart_cv)
plot_convergence_diagnostics(bart_cv)
#check BART assumptions
check_bart_error_assumptions(bart_cv)
#check BART assumptions
check_bart_error_assumptions(bart_cv)
#check BART assumptions
check_bart_error_assumptions(bart_cv)
#check BART assumptions
check_bart_error_assumptions(bart_cv)
CI = round(calc_credible_intervals(bart_cv, X, ci_conf = 0.95), 2)
gg = dplyr::tibble(x_mean = predictions,
lower = CI[,1],
upper = CI[,2],
actual = df_bart$hr_mean_frac_out
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
plot_filtering_estimates <- function(df) {
p <- ggplot(data = gg, aes(x = index)) +
theme_classic() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.4, fill = "red") + #quantiles
geom_point(aes(y = actual), colour = "gray32", #actual observation points
size = 0.9, shape = 16, alpha = 0.9) +
geom_line(aes(y = x_mean), colour = "red", size = 0.4) + #mean estimate
ylab("hr_mean_frac_out") +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index") +
ggtitle("Bayesian Additive Regression Tree") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
plot_filtering_estimates(gg)
summary = investigate_var_importance(bart_cv, num_replicates_for_avg = 5)
pd_plot(bart_cv, j = "PS")
pd_plot(bart_cv, j = "WIND2M")
library(corrplot)
library(viridis)
mycor = cor(X)
col = viridis(100, direction = -1, option = "C")
corrplot(mycor, method = "circle", tl.col="black", tl.srt=45, tl.cex = 0.7, col = col, cl.cex = 0.7,
order = "hclust", type = "upper", diag = T, mar = c(1, 1, 1, 1))
library(tidyverse)
library(sf)
library(tidycensus)
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
head(outages, n = 100)
head(outages_csv, n = 100)
view(head(outages_csv, n = 100))
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
view(head(outages_csv, n = 100))
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
library(tidyverse)
library(sf)
library(tidycensus)
library(lme4)
options(java.parameters = "-Xmx5g")
library(bartMachine)
set_bart_machine_num_cores(4)
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
view(head(outages_csv, n = 100))
#filter only outage events
outages_only = outages_csv %>%
filter(hr_mean_frac_out >= 0.01) #could potentially use status instead?
load("~/Documents/01_VECTOR/Sandia/Seth_model.RData")
rf1.small$call
rf1.small$y
plot(rf1.small$y)
hist=t(rf1.small$y)
hist(rf1.small$y)
rf1.small$predicted
plot(rf1.small$predicted)
hist(rf1.small$predicted)
hist(rf1.small$y, rf1.small$predicted)
plot(rf1.small$y, rf1.small$predicted)
library(tidyverse)
library(sf)
library(tidycensus)
gg = dplyr::tibble(fitted = rf1.small$predicted,
actual = df_strat$deviation1
)
gg = dplyr::tibble(fitted = rf1.small$predicted,
actual = rf1.small$y
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
plot_filtering_estimates <- function(df) {
p <- ggplot(data = gg, aes(x = index)) +
theme_classic() +
geom_point(aes(y = actual), colour = "gray32", #actual observation points
size = 0.9, shape = 16, alpha = 0.9) +
geom_line(aes(y = fitted), colour = "red", size = 0.4) + #mean estimate
ylab("Contribution (Deviation from Expected Value)") +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Disaster Scenario (in order of increasing damage)") +
ggtitle("Bayesian Additive Regression Tree") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
plot_filtering_estimates(gg)
load("~/Documents/01_VECTOR/Sandia/Seth_model.RData")
rf1.small$call
library(tidyverse)
library(sf)
library(tidycensus)
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
view(head(outages_csv, n = 100))
wind_20ms = outages_csv %>%
filter(WIND2M >= 20)
wind_20ms = outages_csv %>%
filter(WIND10M >= 20)
View(wind_20ms)
wind_20ms = outages_csv %>%
filter(WIND10M >= 15)
wind_20ms = outages_csv %>%
filter(WIND10M >= 10)
View(wind_20ms)
summary(outages_csv$WIND10M)
hist(outages_csv$WIND10M)
quantile(outages_csv$WIND10M, probs = seq(0,1,.1))
wind_10m = outages_csv %>%
filter(WIND10M >= 4.69) #90th percentile
View(wind_10m)
load("~/Documents/01_VECTOR/Sandia/Seth_model.RData")
library(tidyverse)
library(sf)
library(tidycensus)
getwd(
)
#### DATA ######################################
## DEM Data
dem_path = "~Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_raster = raster(dem_path)
?raster
install.packages("terra")
library(terra)
dem_raster = rast(dem_path)
#### DATA ######################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_raster = rast(dem_path)
#### DATA ######################################
## DEM Data
dem_path = "~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_raster = rast(dem_path)
dem_raster
plot(dem_raster)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
#### DATA ###################################################################################
## DEM Data
dem_path = "~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
getwd
getwd()
#### DATA ###################################################################################
## DEM Data
dem_path = "./Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "../Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
?file.path
dem = rast("./Data/DEM/gt30w100n40_dem/gt30w100n40.dem")
dem = rast("~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem")
## NLCD land use
nlcd_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/nlcd_2019_land_cover_l48_20210604"
nlcd = rast(nlcd_path)
## NLCD land use
nlcd_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/nlcd_2019_land_cover_l48_20210604/nlcd_2019_land_cover_l48_20210604.img"
nlcd = rast(nlcd_path)
plot(nlcd)
getwd()
dem = rast("~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem")
install.packages("here")
library(here)
?here
dem_path = here("Data", "DEM", "gt30w100n40_dem", "gt30w100n40.dem")
dem = rast(dem_path)
dem_path
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_path2 = here("Data", "DEM", "gt30w100n40_dem", "gt30w100n40.dem")
dem_path
dem_path2
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_path2 = here("Data", "DEM", "gt30w100n40_dem", "gt30w100n40.dem")
dem = rast(dem_path)
p
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/.gt30w100n40.dem.icloud"
dem = rast(dem_path)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem"
dem = rast(dem_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/.gt30w100n40.dem.icloud"
dem = rast(dem_path)
plot(dem)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/.gt30w100n40.dem.icloud"
dem = rast(dem_path)
