#check BART assumptions
check_bart_error_assumptions(bart_cv)
CI = round(calc_credible_intervals(bart_cv, X, ci_conf = 0.95), 2)
gg = dplyr::tibble(x_mean = predictions,
lower = CI[,1],
upper = CI[,2],
actual = df_bart$hr_mean_frac_out
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
plot_filtering_estimates <- function(df) {
p <- ggplot(data = gg, aes(x = index)) +
theme_classic() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.4, fill = "red") + #quantiles
geom_point(aes(y = actual), colour = "gray32", #actual observation points
size = 0.9, shape = 16, alpha = 0.9) +
geom_line(aes(y = x_mean), colour = "red", size = 0.4) + #mean estimate
ylab("hr_mean_frac_out") +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index") +
ggtitle("Bayesian Additive Regression Tree") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
plot_filtering_estimates(gg)
summary = investigate_var_importance(bart_cv, num_replicates_for_avg = 5)
pd_plot(bart_cv, j = "PS")
pd_plot(bart_cv, j = "WIND2M")
library(corrplot)
library(viridis)
mycor = cor(X)
col = viridis(100, direction = -1, option = "C")
corrplot(mycor, method = "circle", tl.col="black", tl.srt=45, tl.cex = 0.7, col = col, cl.cex = 0.7,
order = "hclust", type = "upper", diag = T, mar = c(1, 1, 1, 1))
library(tidyverse)
library(sf)
library(tidycensus)
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
head(outages, n = 100)
head(outages_csv, n = 100)
view(head(outages_csv, n = 100))
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
view(head(outages_csv, n = 100))
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
library(tidyverse)
library(sf)
library(tidycensus)
library(lme4)
options(java.parameters = "-Xmx5g")
library(bartMachine)
set_bart_machine_num_cores(4)
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
view(head(outages_csv, n = 100))
#filter only outage events
outages_only = outages_csv %>%
filter(hr_mean_frac_out >= 0.01) #could potentially use status instead?
load("~/Documents/01_VECTOR/Sandia/Seth_model.RData")
rf1.small$call
rf1.small$y
plot(rf1.small$y)
hist=t(rf1.small$y)
hist(rf1.small$y)
rf1.small$predicted
plot(rf1.small$predicted)
hist(rf1.small$predicted)
hist(rf1.small$y, rf1.small$predicted)
plot(rf1.small$y, rf1.small$predicted)
library(tidyverse)
library(sf)
library(tidycensus)
gg = dplyr::tibble(fitted = rf1.small$predicted,
actual = df_strat$deviation1
)
gg = dplyr::tibble(fitted = rf1.small$predicted,
actual = rf1.small$y
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
plot_filtering_estimates <- function(df) {
p <- ggplot(data = gg, aes(x = index)) +
theme_classic() +
geom_point(aes(y = actual), colour = "gray32", #actual observation points
size = 0.9, shape = 16, alpha = 0.9) +
geom_line(aes(y = fitted), colour = "red", size = 0.4) + #mean estimate
ylab("Contribution (Deviation from Expected Value)") +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Disaster Scenario (in order of increasing damage)") +
ggtitle("Bayesian Additive Regression Tree") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
plot_filtering_estimates(gg)
load("~/Documents/01_VECTOR/Sandia/Seth_model.RData")
rf1.small$call
library(tidyverse)
library(sf)
library(tidycensus)
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
# Format FIPS to character and include starting zero
outages_csv$fips_code = as.character(outages_csv$fips_code)
fips = outages_csv$fips_code
fips0 = str_pad(fips, 5, pad = "0")
outages_csv$fips_code = fips0
view(head(outages_csv, n = 100))
wind_20ms = outages_csv %>%
filter(WIND2M >= 20)
wind_20ms = outages_csv %>%
filter(WIND10M >= 20)
View(wind_20ms)
wind_20ms = outages_csv %>%
filter(WIND10M >= 15)
wind_20ms = outages_csv %>%
filter(WIND10M >= 10)
View(wind_20ms)
summary(outages_csv$WIND10M)
hist(outages_csv$WIND10M)
quantile(outages_csv$WIND10M, probs = seq(0,1,.1))
wind_10m = outages_csv %>%
filter(WIND10M >= 4.69) #90th percentile
View(wind_10m)
load("~/Documents/01_VECTOR/Sandia/Seth_model.RData")
library(tidyverse)
library(sf)
library(tidycensus)
getwd(
)
#### DATA ######################################
## DEM Data
dem_path = "~Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_raster = raster(dem_path)
?raster
install.packages("terra")
library(terra)
dem_raster = rast(dem_path)
#### DATA ######################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_raster = rast(dem_path)
#### DATA ######################################
## DEM Data
dem_path = "~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_raster = rast(dem_path)
dem_raster
plot(dem_raster)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
#### DATA ###################################################################################
## DEM Data
dem_path = "~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
getwd
getwd()
#### DATA ###################################################################################
## DEM Data
dem_path = "./Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "../Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
?file.path
dem = rast("./Data/DEM/gt30w100n40_dem/gt30w100n40.dem")
dem = rast("~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem")
## NLCD land use
nlcd_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/nlcd_2019_land_cover_l48_20210604"
nlcd = rast(nlcd_path)
## NLCD land use
nlcd_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/nlcd_2019_land_cover_l48_20210604/nlcd_2019_land_cover_l48_20210604.img"
nlcd = rast(nlcd_path)
plot(nlcd)
getwd()
dem = rast("~/Data/DEM/gt30w100n40_dem/gt30w100n40.dem")
install.packages("here")
library(here)
?here
dem_path = here("Data", "DEM", "gt30w100n40_dem", "gt30w100n40.dem")
dem = rast(dem_path)
dem_path
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_path2 = here("Data", "DEM", "gt30w100n40_dem", "gt30w100n40.dem")
dem_path
dem_path2
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem_path2 = here("Data", "DEM", "gt30w100n40_dem", "gt30w100n40.dem")
dem = rast(dem_path)
p
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/.gt30w100n40.dem.icloud"
dem = rast(dem_path)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem"
dem = rast(dem_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/.gt30w100n40.dem.icloud"
dem = rast(dem_path)
plot(dem)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR/Sandia/Data/DEM/gt30w100n40_dem/.gt30w100n40.dem.icloud"
dem = rast(dem_path)
getwd()
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
#### DATA ###################################################################################
## DEM Data
dem_path = "/Users/paulmj/Documents/01_VECTOR.nosync/Sandia/Data/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem_path)
## NLCD land use
nlcd_path = "/Users/paulmj/Documents/01_VECTOR.nosync/Sandia/Data/nlcd_2019_land_cover_l48_20210604/nlcd_2019_land_cover_l48_20210604.img"
nlcd = rast(nlcd_path)
plot(dem)
plot(nlcd)
?rast
dem2 = rast(~Data/gt30w100n40_dem/gt30w100n40.dem)
dem2 = rast("~Data/gt30w100n40_dem/gt30w100n40.dem")
dem2 = rast(~"Data/gt30w100n40_dem/gt30w100n40.dem")
file.path("..", "Data")
file.path(".", "Data")
setwd("~/Documents/01_VECTOR.nosync/Sandia")
getwd()
dem2 = rast("./Data/gt30w100n40_dem/gt30w100n40.dem")
dem2_path = "./Data/gt30w100n40_dem/gt30w100n40.dem")
dem2_path = "./Data/gt30w100n40_dem/gt30w100n40.dem"
dem2 = rast(dem2_path
dem2 = rast(dem2_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "./Data/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem2_path)
## NLCD land use
nlcd_path = "./Data/nlcd_2019_land_cover_l48_20210604/nlcd_2019_land_cover_l48_20210604.img"
nlcd = rast(nlcd_path)
#### DATA ###################################################################################
## DEM Data
dem_path = "./Data/gt30w100n40_dem/gt30w100n40.dem"
dem = rast(dem2_path)
dem = rast(dem_path)
plot(dem)
## NLCD land use
nlcd_path = "./Data/nlcd_2019_land_cover_l48_20210604/nlcd_2019_land_cover_l48_20210604.img"
nlcd = rast(nlcd_path)
plot(nlcd)
##### OUTAGE DATA #############################################
# Read in data
#outages_csv = read.csv("SE_states_outage_merra_2018.csv", header = T)
#save(outages_csv, file = "outages.Rda")
load(file = "outages.Rda")
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
##### OUTAGE DATA #############################################
# Read in data
outages_csv = read.csv(".Data/SE_states_outage_merra_2018.csv", header = T)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
##### OUTAGE DATA #############################################
# Read in data
outages_csv = read.csv(".Data/SE_states_outage_merra_2018.csv", header = T)
##### OUTAGE DATA #############################################
# Read in data
outages_csv = read.csv("./Data/SE_states_outage_merra_2018.csv", header = T)
save(outages_csv, file = "./Data/outages.Rda")
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
load("TX_rast_30m.Rda")
### Geometry base - US Counties
year=2019
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
census_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
census_map = census_map %>% select(GEOID, NAME)
## PROJECTION (USA Equal Area Conic: EPSG 5070)
Houston_census = st_transform(census_map, crs = st_crs(TX_rast_30m))
TX_rast_30m_crop = crop(TX_rast_30m, vect(Houston_census))
TX_rast_30m_crop = st_crop(TX_rast_30m, Houston_census) #crop to Harris county
TX_rast_30m_crop_mask = st_crop(TX_rast_30m_crop, Houston_census, crop = FALSE) #mask to Harris county
plot(TX_rast_30m_crop_mask)
plot(TX_rast_30m_crop)
hh = ggplot() +
geom_stars(data = TX_rast_30m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
hh
## Root zone data
TX_gdb =  "/Users/paulmj/Downloads/gSSURGO_TX/gSSURGO_TX.gdb"
# TX = sf::st_read(dsn = TX_gdb, layer = "MUPOLYGON")
# TX_group = TX %>%
#   group_by(MUKEY) %>%
#   summarise(n = n())
# save(TX_group, file = "TX_group.Rda")
load("TX_group.Rda")
TX_Valu1 = sf::st_read(dsn = TX_gdb, layer = "Valu1")
TX_group_val1 = TX_group %>% left_join(TX_Valu1, by = c("MUKEY" = "mukey"))
TX_rast_100m = st_rasterize(TX_group_val1["rootznemc"], dx = 100, dy = 100) #100m x 100km resolution
## PROJECTION (USA Equal Area Conic: EPSG 5070)
Houston_census = st_transform(census_map, crs = st_crs(TX_rast_100m))
TX_rast_100m_crop = st_crop(TX_rast_100m, Houston_census) #crop to Harris county
TX_rast_100m_crop_mask = st_crop(TX_rast_100m_crop, Houston_census, crop = FALSE) #mask to Harris county
plot(TX_rast_100m_crop_mask)
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA)
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA) +
theme_minimal()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.25), fill = NA) +
theme_minimal()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), lwd = 0.5, fill = NA) +
theme_minimal()
hh
?geom_sf
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA) +
theme_minimal()
hh
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.4) +
theme_minimal()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 1) +
theme_minimal()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.5) +
theme_minimal()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_minimal()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_dark()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "transparent") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_dark()
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "transparent") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_dark() +
labs(title = "Harris County: Root Zone Depth", fill = "Root Zn (cm)")
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "transparent") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_dark() +
labs(title = "Harris County: Root Zone Depth")
hh
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "transparent") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_dark() +
labs(title = "Harris County: Root Zone Depth", fill = "Root Zone (cm)") +
theme(plot.title = element_text(hjust = 0.5))
hh
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "transparent") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_dark() +
labs(title = "Harris County: Root Zone Depth", fill = "Root Zone\n(cm)") +
theme(plot.title = element_text(hjust = 0.5))
hh
hh
hh = ggplot() +
geom_stars(data = TX_rast_100m_crop_mask, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "transparent") +
geom_sf(data = Houston_census, colour = alpha("white", 0.5), fill = NA, size = 0.45) +
theme_dark() +
labs(title = "Harris County: Root Zone Depth", fill = "Root Zone\n(cm)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
hh
hh
st_crs(Houston_census)$IsGeographic
st_crs(Houston_census)$units_gdal
## TREE DATA
tree_db = "/Users/paulmj/Downloads/L48_Totals/L48_Totals.gdb"
ogrListLayers?
?ogrListLayers()
ogrListLayers(tree_db)
ogrListLayers(tree_db)
st_layers(tree_db)
?st_layers
## Root zone data
TX_gdb =  "/Users/paulmj/Downloads/gSSURGO_TX/gSSURGO_TX.gdb"
st_layers(TX_gdb)
st_layers(tree_db)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
## Root zone data
TX_gdb =  "/Users/paulmj/Downloads/gSSURGO_TX/gSSURGO_TX.gdb"
# TX = sf::st_read(dsn = TX_gdb, layer = "MUPOLYGON")
# TX_group = TX %>%
#   group_by(MUKEY) %>%
#   summarise(n = n())
# save(TX_group, file = "TX_group.Rda")
load("Data/TX_group.Rda")
TX_Valu1 = sf::st_read(dsn = TX_gdb, layer = "Valu1")
TX_group_val1 = TX_group %>% left_join(TX_Valu1, by = c("MUKEY" = "mukey"))
TX_rast_100m = st_rasterize(TX_group_val1["rootznemc"], dx = 100, dy = 100) #100m x 100km resolution
# save(TX_rast_1k, file = "TX_rast_1k.Rda") #1k for county
save(TX_rast_100m, file = "Data/TX_rast_100m.Rda") #100m for census tract (Houston)
