library(mapview)
year=2018
state = "Alabama"
county = c("Madison")
county_map = county_map %>% select(GEOID, NAME)
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
mapview(df, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
# LIST OF VARIABLES
v18 = load_variables(2018, "acs5", cache = TRUE)
View(v18)
library(tidyverse)
library(readxl)
library(sf)
library(tidycensus)
library(tidycensus) #api with census
library(sf) #class and functions for vector data
library(tidyverse) #collection of r data tools, including dplyr
library(mapview)
year=2018
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
View(county_map)
county_map = county_map %>% select(GEOID, NAME)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
white = df %>%
ggplot(aes(fill = QWHITE)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
plot(white)
View(county_map)
write.csv(county_map, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_census_2018.csv", row.names = TRUE)
county_map2 = county_map %>%
st_geometry(NULL)
county_map2 = county_map %>%
st_set_geometry(NULL)
write.csv(county_map2, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_census_2018.csv", row.names = TRUE)
year=2019
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county_map = county_map %>% select(GEOID, NAME)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
white = df %>%
ggplot(aes(fill = QWHITE)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
black = df %>%
ggplot(aes(fill = QBLACK)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
county_map2 = county_map %>%
st_set_geometry(NULL)
write.csv(county_map2, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_censustract_2019acs.csv", row.names = TRUE)
year=2020
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
?get_acs
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2020, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs5")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2020, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2021, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = county_map %>% select(GEOID, NAME)
install.packages("stars")
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
load("~/Documents/01_VECTOR.nosync/Sandia/TX_group.Rda")
## Root zone data
TX_gdb =  "/Users/paulmj/Downloads/gSSURGO_TX/gSSURGO_TX.gdb"
TX_Valu1 = sf::st_read(dsn = TX_gdb, layer = "Valu1")
TX_group_val1 = TX_group %>% left_join(TX_Valu1, by = c("MUKEY" = "mukey"))
TX_group_val1_100 = TX_group_val1 %>%
filter(!is.na(rootznemc)) %>%
slice(1:100) %>%
select(MUKEY, rootznemc)
?st_rasterize
TX_rast100 = st_rasterize(TX_group_val1_100)
TX_rast100 = st_rasterize(TX_group_val1_100["rootznemc"])
plot(TX_rast100)
TX_rast = st_rasterize(TX_group_val1["rootznemc"])
plot(TX_rast)
rr = ggplot() +
geom_tile(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c()
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
#geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
geom_stars(data = TX_rast, aes(fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc), alpha = 0.8) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc), alpha = 0.9) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_bw()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_classic()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_minimal()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "white")
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray")
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_light()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
rr
st_crs(TX_rast)
st_crs(TX_rast)$units_gdal
TX_rast_1k = st_rasterize(TX_group_val1["rootznemc"], dx = 1000, dy = 1000)
rr = ggplot() +
geom_stars(data = TX_rast_1k, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
rr
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
mycrs = 5070
load(file = "./Data/nlcd_proj_100_extract.Rda")
# need to partition large ataset in order for R studio to process
maxID = max(nlcd_proj_100_extract$ID) #3107
try01 = nlcd_proj_100_extract %>% filter(ID < 301)
try02 = nlcd_proj_100_extract %>% filter(ID < 601 & ID >= 301)
try01 = nlcd_proj_100_extract %>% filter(ID < 301) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
View(try01)
max(try01$ID)
try02 = nlcd_proj_100_extract %>% filter(ID < 601 & ID >= 301) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try03 = nlcd_proj_100_extract %>% filter(ID < 901 & ID >= 601) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try04 = nlcd_proj_100_extract %>% filter(ID < 1201 & ID >= 901) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try05 = nlcd_proj_100_extract %>% filter(ID < 1501 & ID >= 1201) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try06 = nlcd_proj_100_extract %>% filter(ID < 1801 & ID >= 1501) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try07 = nlcd_proj_100_extract %>% filter(ID < 2101 & ID >= 1801) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try08 = nlcd_proj_100_extract %>% filter(ID < 2401 & ID >= 2101) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try09 = nlcd_proj_100_extract %>% filter(ID < 2701 & ID >= 2401) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
try10 = nlcd_proj_100_extract %>% filter(ID < (maxID) & ID >= 2701) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
# Stack data sets together
nlcd_join_stack = try01 %>%
bind_rows(try02)
# Stack data sets together
nlcd_join_stack = try01 %>%
bind_rows(try02) %>%
bind_rows(try03)
# Stack data sets together
nlcd_join_stack = try01 %>%
bind_rows(try02) %>%
bind_rows(try03) %>%
bind_rows(try04) %>%
bind_rows(try05) %>%
bind_rows(try06) %>%
bind_rows(try07) %>%
bind_rows(try08) %>%
bind_rows(try09) %>%
bind_rows(try10)
save(nlcd_join_stack, file = "nlcd_join_stack.Rda")
# Expand LANDCLASS into wide format
nlcd_wide = nlcd_join_stack %>%
pivot_wider(names_from = LANDCLASS, values_from = n)
View(nlcd_wide)
# Column totals of land type
nlcd_wide2 = nlcd_wide %>%
replace(is.na(.), 0) %>%
mutate(Total = rowSums(across(Barren:Other)))
# Percentages of land type
nlcd_perc = nlcd_wide2 %>%
mutate(across(Barren:Total, ~ .x / Total))
##### CONTIGUOUS US COUNTY MAP ############################################
year=2019
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state_list = c("AL", "AR", "AZ", "CA", "CO", "CT", "DE", "FL", "GA", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MP", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VI", "VT", "WA", "WI", "WV", "WY")
county_map = get_acs(geography = "county", state = state_list,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county_map = county_map %>%
mutate(POPULATION = estimate) %>%
dplyr::select(GEOID, NAME, POPULATION)
## Project county map and calculate area and population density of each county
county_map_proj = county_map %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
# join to census shapefile
county_map_nlcd = census_map_proj %>%
bind_cols(nlcd_perc)
## Project county map and calculate area and population density of each county
county_map_proj = county_map %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
# join to census shapefile
county_map_nlcd = county_map_proj %>%
bind_cols(nlcd_perc)
max(try10$ID)
try10 = nlcd_proj_100_extract %>% filter(ID <= (maxID) & ID >= 2701) %>%
mutate(LANDCLASS = case_when(
`NLCD Land Cover Class` %in% c("Open Water", "Perennial Snow/Ice") ~ "Water",
`NLCD Land Cover Class` %in% c("Developed, Open Space", "Developed, Low Intensity", "Developed, Medium Intensity", "Developed, High Intensity") ~ "Developed",
`NLCD Land Cover Class` %in% c("Barren Land") ~ "Barren",
`NLCD Land Cover Class` %in% c("Deciduous Forest", "Evergreen Forest", "Mixed Forest") ~ "Forest",
`NLCD Land Cover Class` %in% c("Shrub/Scrub") ~ "Shrub",
`NLCD Land Cover Class` %in% c("Herbaceous")~ "Herbaceous",
`NLCD Land Cover Class` %in% c("Hay/Pasture", "Cultivated Crops") ~ "Cultivated",
`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands") ~ "Wetlands",
TRUE ~ "Other"
)) %>%
group_by(ID, LANDCLASS) %>%
count()
# Stack data sets together
nlcd_join_stack = try01 %>%
bind_rows(try02) %>%
bind_rows(try03) %>%
bind_rows(try04) %>%
bind_rows(try05) %>%
bind_rows(try06) %>%
bind_rows(try07) %>%
bind_rows(try08) %>%
bind_rows(try09) %>%
bind_rows(try10)
save(nlcd_join_stack, file = "nlcd_join_stack.Rda")
# Expand LANDCLASS into wide format
nlcd_wide = nlcd_join_stack %>%
pivot_wider(names_from = LANDCLASS, values_from = n)
# Column totals of land type
nlcd_wide2 = nlcd_wide %>%
replace(is.na(.), 0) %>%
mutate(Total = rowSums(across(Barren:Other)))
# Percentages of land type
nlcd_perc = nlcd_wide2 %>%
mutate(across(Barren:Total, ~ .x / Total))
# join to census shapefile
county_map_nlcd = county_map_proj %>%
bind_cols(nlcd_perc)
gg2 = ggplot(county_map_nlcd)+
geom_sf(aes(fill = Developed), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal()  #removes background
theme_dark() +
labs(title = "NLCD Land Use", fill = "Developed\n(prop.)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
gg2
save(county_map_nlcd, file = "county_map_nlcd.Rda")
