sub_map = get_acs(geography = "county subdivision", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
sub_map = sub_map %>% select(GEOID, NAME)
### Subdivision
sub_map = get_acs(geography = "county subdivision", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
sub_map = sub_map %>% select(GEOID, NAME)
acs_sub = get_acs(geography = "county subdivision", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
acs_sub_w = acs_sub %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df_sub = sub_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
mapview(df_sub, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
df_sub
acs_sub_w
sub_map
df_sub
View(df_sub)
### Subdivision
sub_map = get_acs(geography = "block group", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
sub_map = sub_map %>% select(GEOID, NAME)
acs_sub_w = acs_sub %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
mapview(df_sub, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
acs_sub = get_acs(geography = "block group", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
df_sub = sub_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
df_sub
v18 = load_variables(2018, "acs5", cache = TRUE)
View(v18)
mapview(df, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
library(tidycensus) #api with census
library(sf) #class and functions for vector data
library(tidyverse) #collection of r data tools, including dplyr
library(mapview)
year=2018
state = "Alabama"
county = c("Madison")
county_map = county_map %>% select(GEOID, NAME)
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
mapview(df, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
# LIST OF VARIABLES
v18 = load_variables(2018, "acs5", cache = TRUE)
View(v18)
library(tidyverse)
library(readxl)
library(sf)
library(tidycensus)
library(tidycensus) #api with census
library(sf) #class and functions for vector data
library(tidyverse) #collection of r data tools, including dplyr
library(mapview)
year=2018
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
View(county_map)
county_map = county_map %>% select(GEOID, NAME)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
white = df %>%
ggplot(aes(fill = QWHITE)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
plot(white)
View(county_map)
write.csv(county_map, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_census_2018.csv", row.names = TRUE)
county_map2 = county_map %>%
st_geometry(NULL)
county_map2 = county_map %>%
st_set_geometry(NULL)
write.csv(county_map2, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_census_2018.csv", row.names = TRUE)
year=2019
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county_map = county_map %>% select(GEOID, NAME)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
white = df %>%
ggplot(aes(fill = QWHITE)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
black = df %>%
ggplot(aes(fill = QBLACK)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
county_map2 = county_map %>%
st_set_geometry(NULL)
write.csv(county_map2, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_censustract_2019acs.csv", row.names = TRUE)
year=2020
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
?get_acs
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2020, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs5")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2020, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2021, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = county_map %>% select(GEOID, NAME)
install.packages("stars")
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
load("~/Documents/01_VECTOR.nosync/Sandia/TX_group.Rda")
## Root zone data
TX_gdb =  "/Users/paulmj/Downloads/gSSURGO_TX/gSSURGO_TX.gdb"
TX_Valu1 = sf::st_read(dsn = TX_gdb, layer = "Valu1")
TX_group_val1 = TX_group %>% left_join(TX_Valu1, by = c("MUKEY" = "mukey"))
TX_group_val1_100 = TX_group_val1 %>%
filter(!is.na(rootznemc)) %>%
slice(1:100) %>%
select(MUKEY, rootznemc)
?st_rasterize
TX_rast100 = st_rasterize(TX_group_val1_100)
TX_rast100 = st_rasterize(TX_group_val1_100["rootznemc"])
plot(TX_rast100)
TX_rast = st_rasterize(TX_group_val1["rootznemc"])
plot(TX_rast)
rr = ggplot() +
geom_tile(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c()
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
#geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
geom_stars(data = TX_rast, aes(fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc), alpha = 0.8) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc), alpha = 0.9) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_bw()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_classic()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_minimal()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "white")
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray")
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_light()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
rr
st_crs(TX_rast)
st_crs(TX_rast)$units_gdal
TX_rast_1k = st_rasterize(TX_group_val1["rootznemc"], dx = 1000, dy = 1000)
rr = ggplot() +
geom_stars(data = TX_rast_1k, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
rr
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
setwd("~/Documents/01_VECTOR.nosync/Sandia")
mycrs = 5070
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state_list = c("AL", "AR", "AZ", "CA", "CO", "CT", "DE", "FL", "GA", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")
##### CONTIGUOUS US COUNTY MAP ######################################################
year=2019
county_map = get_acs(geography = "county", state = state_list,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county_map = county_map %>%
mutate(POPULATION = estimate) %>%
dplyr::select(GEOID, NAME, POPULATION)
## Project county map and calculate area and population density of each county
county_map_proj = county_map %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
county_map_area = county_map_proj %>%
mutate(AREA = as.vector(st_area(county_map_proj))) %>% ## calculate area of each county (sq-meters); as.vector removes units suffix
mutate(DENSITY = POPULATION / AREA * 1000^2) #population per sq-km
##### STATIC VARIABLES ##############################################################
## NLCD
load(file = "./Data/county_map_nlcd.Rda")
county_map_nlcd2 = county_map_nlcd %>%
select(GEOID, Barren:Total) %>%
st_set_geometry(NULL)
## DEM
load(file = "./Data/county_map_dem.Rda")
county_map_dem2 = county_map_dem %>%
select(GEOID, DEM_mean:DEM_max) %>%
st_set_geometry(NULL)
## Root Zone
load(file = "./Data/county_map_rz.Rda")
county_map_rz2 = county_map_rz %>%
select(GEOID, RZ_mean:RZ_mode) %>%
st_set_geometry(NULL)
## Join data
county_map_static = county_map_area %>%
inner_join(county_map_nlcd2, by = "GEOID") %>%
inner_join(county_map_dem2, by = "GEOID") %>%
inner_join(county_map_rz2, by = "GEOID") %>%
select(-Other, -Total)
#### PLOTS ##########################################################################
gg = ggplot(county_map_static)+
geom_sf(aes(fill = DENSITY), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
theme_minimal()  #removes background
#### PLOTS ##########################################################################
gg = ggplot(county_map_static)+
geom_sf(aes(fill = Developed), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal() +  #removes background
theme_dark() +
labs(title = "NLCD Land Use", fill = "Developed\n(prop.)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
pdf("US_nlcd_developed.pdf", width = 7.48, height = 4.5)
gg
dev.off()
#### PLOTS ##########################################################################
gg = ggplot(county_map_static)+
geom_sf(aes(fill = Forest), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal() +  #removes background
theme_dark() +
labs(title = "NLCD Land Use", fill = "Forest\n(prop.)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
pdf("US_nlcd_forest.pdf", width = 7.48, height = 4.5)
gg
dev.off()
#### PLOTS ##########################################################################
gg = ggplot(county_map_static)+
geom_sf(aes(fill = RZ_mean), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal() +  #removes background
theme_dark() +
#labs(title = "NLCD Land Use", fill = "Forest\n(prop.)") +
labs(title = "Root-zone Depth", fill = "Mean (cm)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
pdf("US_rz_mean.pdf", width = 7.48, height = 4.5)
gg
dev.off()
#### PLOTS ##########################################################################
gg = ggplot(county_map_static)+
geom_sf(aes(fill = DEM_sd), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal() +  #removes background
theme_dark() +
#labs(title = "NLCD Land Use", fill = "Forest\n(prop.)") +
#labs(title = "Root-zone Depth", fill = "Mean (cm)") +
labs(title = "Elevation", fill = "St. Dev.") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
pdf("US_dem_sd.pdf", width = 7.48, height = 4.5)
gg
dev.off()
#### PLOTS ##########################################################################
gg = ggplot(county_map_static)+
geom_sf(aes(fill = DEM_sd), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal() +  #removes background
theme_dark() +
#labs(title = "NLCD Land Use", fill = "Forest\n(prop.)") +
#labs(title = "Root-zone Depth", fill = "Mean (cm)") +
labs(title = "Elevation", fill = "St. Dev. (m)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
pdf("US_dem_sd.pdf", width = 7.48, height = 4.5)
gg
dev.off()
#### PLOTS ##########################################################################
gg = ggplot(county_map_static)+
geom_sf(aes(fill = DEM_mean), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
#geom_sf(fill = NA, show.legend = F, color = "black", lwd = 0.005)+
#coord_sf(datum = NA) + #removes gridlines
#guides(fill = "none") + #removes legend
#theme_minimal() +  #removes background
theme_dark() +
#labs(title = "NLCD Land Use", fill = "Forest\n(prop.)") +
#labs(title = "Root-zone Depth", fill = "Mean (cm)") +
labs(title = "Elevation", fill = "Mean (m)") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
pdf("US_dem_mean.pdf", width = 7.48, height = 4.5)
gg
dev.off()
install.packages("drat")
library(drat)
?drat
addRepo("geanders")
install.packages("hurricaneexposuredata")
library(hurricaneexposuredata)
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
library(hurricaneexposuredata)
data("hurr_tracks")
head(hurr_tracks)
data("closest_dist")
head(closest_dist)
data("county_centers")
load(file = "Data/outages.Rda")
summary(outages_csv$year)
?hurr_tracks
data("storm_winds")
map_counties("Katrina-2005", metric = "wind", wind_var = "sust_dur")
library(hurricaneexposuredata)
hurricaneexposuredata::map_counties("Katrina-2005", metric = "wind", wind_var = "sust_dur")
library(hurricaneesposure)
install.packages("hurricaneexposure")
library(hurricaneesposure)
library(hurricaneexposure)
map_counties("Katrina-2005", metric = "wind", wind_var = "sust_dur")
asd = map_counties("Katrina-2005", metric = "wind", wind_var = "sust_dur")
asd[[1]]
asd[[2]]
asd[[3]]
asd[[4]]
asd[[5]]
asd[[6]]
asd[[7]]
asd[[8]]
asd[[9]]
asdf = asd[[9]]
?hurricaneexposure
?hurricaneexposure
head(storm_winds)
data("rain")
data("ext_tracks_winds")
data("ext_tracks_wind")
head(ext_tracks_wind)
data("rain")
head(rain)
?ext_tracks_wind
?storm_winds
